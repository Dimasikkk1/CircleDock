<Window
    x:Class="CircleDock.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commands="clr-namespace:CircleDock.Commands"
    xmlns:controls="clr-namespace:CircleDock.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:properties="clr-namespace:CircleDock.Properties"
    x:Name="mainWindow"
    Title="CircleDock"
    Width="{Binding Window.Width, Mode=TwoWay}"
    Height="{Binding Window.Height, Mode=TwoWay}"
    MaxWidth="{Binding Window.Width, Mode=TwoWay}"
    MaxHeight="{Binding Window.Height, Mode=TwoWay}"
    AllowDrop="True"
    AllowsTransparency="True"
    Left="{Binding Window.Left, Mode=TwoWay}"
    Top="{Binding Window.Top, Mode=TwoWay}"
    Topmost="{Binding Window.Topmost, Mode=TwoWay}"
    Visibility="{Binding Window.Visibility, Converter={StaticResource BoolToVisibilityConverter}, Mode=TwoWay}"
    WindowStartupLocation="Manual"
    WindowStyle="None"
    mc:Ignorable="d">

    <Window.Resources>
        <commands:DragMainWindowCommand x:Key="DragMainWindowCommand"/>
        <commands:CloseMainWindowCommand x:Key="CloseMainWindowCommand" />
        <commands:ShowSettingsWindowCommand x:Key="OpenSettingsWindowCommand" />
    </Window.Resources>

    <Window.Background>
        <SolidColorBrush Opacity="0" />
    </Window.Background>

    <!--  Window Commands  -->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="MouseDown">
            <i:InvokeCommandAction Command="{StaticResource DragMainWindowCommand}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
        <i:EventTrigger EventName="DragEnter">
            <i:InvokeCommandAction Command="{Binding DragEnter}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Drop">
            <i:InvokeCommandAction Command="{Binding Drop}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="PreviewMouseWheel">
            <i:InvokeCommandAction Command="{Binding MouseWheel}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
    </i:Interaction.Triggers>

    <Window.ContextMenu>
        <ContextMenu>
            <MenuItem Command="{Binding ChangeVisibility}" Header="{x:Static properties:Resources.MainWindow_ContextMenu_Hide}" />
            <MenuItem Header="{x:Static properties:Resources.MainWindow_ContextMenu_Add}">
                <MenuItem Command="{Binding AddFolder}" Header="{x:Static properties:Resources.MainWindow_ContextMenu_Folder}" />
                <MenuItem Command="{Binding AddShortcut}" Header="{x:Static properties:Resources.MainWindow_ContextMenu_Shortcut}" />
            </MenuItem>
            <MenuItem Command="{StaticResource OpenSettingsWindowCommand}" Header="{x:Static properties:Resources.MainWindow_ContextMenu_Settings}" />
            <MenuItem Command="{StaticResource CloseMainWindowCommand}" Header="{x:Static properties:Resources.MainWindow_ContextMenu_Quit}" />
        </ContextMenu>
    </Window.ContextMenu>

    <Grid>
        <!--  Кольцо  -->
        <Border
            Width="{Binding Ring.Diameter}"
            Height="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width, Mode=TwoWay}"
            BorderBrush="{DynamicResource RingBrush}"
            BorderThickness="{Binding Ring.Thickness}"
            CornerRadius="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ActualWidth, Converter={StaticResource HalfDeviderConverter}, Mode=OneWay}">

            <Border.Resources>
                <SolidColorBrush x:Key="RingBrush" Color="{Binding Ring.Color}" />
            </Border.Resources>
        </Border>

        <!--  Ярлыки  -->
        <controls:CircleDockControl
            Rotation="{Binding Dock.Rotation}"
            ShortcutCommand="{Binding ShortcutCommand}"
            Shortcuts="{Binding Shortcuts}"
            ShortcutsHeight="{Binding Shortcut.Height}"
            ShortcutsWidth="{Binding Shortcut.Width}" />

        <Button
            Width="{Binding Button.Diameter}"
            Height="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Width, Mode=TwoWay}"
            Padding="15"
            Background="{DynamicResource ButtonBrush}"
            Command="{Binding ChangeVisibility}">

            <Button.Resources>
                <SolidColorBrush x:Key="ButtonBrush" Color="{Binding Button.Background}" />
            </Button.Resources>

            <Button.Template>
                <ControlTemplate TargetType="Button">
                    <Border
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding Property=ActualWidth,
                                                       Converter={StaticResource HalfDeviderConverter}}">

                        <ContentPresenter Content="{TemplateBinding Content}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="MouseEnter">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Opacity"
                                            To="1"
                                            Duration="0:0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetProperty="Opacity"
                                            To="0.9"
                                            Duration="0:0:0:0.2" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="PreviewMouseDown">
                            <EventTrigger.Actions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            AutoReverse="True"
                                            Storyboard.TargetProperty="Width"
                                            To="90"
                                            Duration="0:0:0:0.06" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger.Actions>
                        </EventTrigger>
                        <!--  Какая-то шляпа, с биндингом не работает  -->

                        <!--<EventTrigger RoutedEvent="PreviewMouseUp">
                                <EventTrigger.Actions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetProperty="Width"
                                                                Duration="0:0:0:0.04"
                                                                To="{TemplateBinding Width}"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger.Actions>
                            </EventTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Button.Template>

            <Button.Content>
                <Image Source="{Binding Button.Image, Converter={StaticResource StringToImageConverter}}" />
            </Button.Content>
        </Button>
    </Grid>
</Window>
